import { Component, OnDestroy, OnInit, ChangeDetectorRef, NgZone } from '@angular/core';
import { CommonModule } from '@angular/common';
import { EggAudioService } from './components/egg-audio.service';

type State = 'intro' | 'quiz' | 'win' | 'lose' | 'cooldown';

interface Question {
  text: string;
  choices: string[];
  answerIndex: number; // index i choices for riktig svar
}

@Component({
  selector: 'app-easter-egg',
  standalone: true,
  imports: [CommonModule],
  templateUrl: './easter-egg.html',
})
export class EasterEgg implements OnInit, OnDestroy {
  state: State = 'intro';

  // --- INTRO typewriter ---
  typed = '';
  private typeRAF?: number;
  private introUnlockTO?: any;
  canStartQuiz = false; // LÃ…S Start quiz til voice er ferdig
  introMsg = `Hello Joakimâ€¦ Iâ€™ve been watching you.
Your life has been a list of tasksâ€¦ unfinished, forgotten, ignored.
Today, that changes.
Before you lies a simple game â€” ten questions.
Answer them all correctly, and you may continueâ€¦ freeâ€¦ to my precious secrets.
But fail even onceâ€¦ and the system will decide your fate.
Make your choice.
Playâ€¦ or remain trapped in unfinished businessâ€¦ forever.`;

  // --- LOSE typewriter ---
  typedLose = '';
  private loseTypeRAF?: number;
  loseMsg = `You made your choiceâ€¦ and the list made its own.
One slip, and your unfinished business finishes you.
Fragments will be cataloged, comfort will be purged, delays compressed.
Watch the bar climb. Thatâ€™s your discipline being compiled.
At 100%, access remains sealed. You are now a cautionary comment.`;

  // --- WIN typewriter ---
  typedWin = '';
  private winTypeRAF?: number;
  winMsg = `You did not flinch.
Questions fell, one by one.
The machine acknowledges youâ€¦ for now.
Door unlocked. Walk through â€” or hesitate and lose it.`;

  // --- Quiz ---
  private baseQuestions: Question[] = [
    // 1) Your two
    {
      text: "What was Marcus's first real Next.js project?",
      choices: ['Tasting-Next', 'Hobolator', 'TaskForce', 'VacationHelper'],
      answerIndex: 1,
    },
    {
      text: "Who is the world's greatest actor?",
      choices: ['Steven Seagal', 'Nicolas Cage', 'Tommy Wiseau', 'Chuck Norris'],
      answerIndex: 0,
    },

    // 2) Angular (4)
    {
      text: 'In a standalone component, where do you include the modules you need (e.g., CommonModule)?',
      choices: [
        'In NgModule.declarations',
        'In @Component.imports',
        'In providers',
        'In bootstrap',
      ],
      answerIndex: 1,
    },
    {
      text: 'What does @Injectable({ providedIn: "root" }) do?',
      choices: [
        'Logs all calls to the service',
        'Loads the service only in lazy routes',
        'Registers the service globally in the root injector',
        'Makes the service not tree-shakeable',
      ],
      answerIndex: 2,
    },
    {
      text: 'Why did we use NgZone.runOutsideAngular() for the typewriter?',
      choices: [
        'To render on the server',
        'To force a full page reload',
        'To share state between components',
        'To avoid unnecessary change detection on every frame',
      ],
      answerIndex: 3,
    },
    {
      text: 'Where do you place static files (mp3) to be served as /sounds/... in this app?',
      choices: ['src/assets/', 'public/', 'node_modules/', 'src/environments/'],
      answerIndex: 1,
    },

    // 3) Misc (4)
    {
      text: 'Tailwind: how do you center content both horizontally and vertically in a container?',
      choices: [
        'justify-between items-center',
        'content-center justify-center',
        'flex items-center justify-center',
        'text-center mx-auto',
      ],
      answerIndex: 2,
    },
    {
      text: 'TypeScript: what does "as const" do?',
      choices: [
        'Makes literal values readonly and narrows their types',
        'Casts to any',
        'Enables strictNullChecks',
        'Removes unions',
      ],
      answerIndex: 0,
    },
    {
      text: 'Git: which command creates and switches to a new branch "feature/egg"?',
      choices: [
        'git branch feature/egg',
        'git switch feature/egg',
        'git checkout feature/egg',
        'git checkout -b feature/egg',
      ],
      answerIndex: 3,
    },
    {
      text: 'JavaScript: what does typeof null return?',
      choices: ['"null"', '"undefined"', '"object"', '"number"'],
      answerIndex: 2,
    },
  ];

  questions: Question[] = []; // aktiv liste (shufflet)
  idx = 0; // nÃ¥vÃ¦rende spÃ¸rsmÃ¥l (fikser TS-feilen)

  // Timer pr spÃ¸rsmÃ¥l
  timeLeft = 60;
  private timerId?: any;

  // Fake "virus"
  logs: string[] = [];
  progress = 0;
  private virusRAF?: number;
  private logInterval?: any;
  private readonly VIRUS_DURATION_MS = 30_000;

  constructor(
    private audio: EggAudioService,
    private zone: NgZone,
    private cdr: ChangeDetectorRef
  ) {}

  ngOnInit() {
    this.startIntro();
  }

  ngOnDestroy() {
    this.clearAllTimers();
    this.audio.stopAll();
  }

  // ---------- INTRO ----------
  startIntro() {
    this.state = 'intro';
    this.canStartQuiz = false;
    if (this.introUnlockTO) clearTimeout(this.introUnlockTO);

    this.audio
      .playIntroLooped({
        themeVolume: 0.2,
        themeStartDelayMs: 500,
        themeFadeInMs: 1000,
        themeFadeOutMs: 1200,
        fallbackVoiceMs: 41_000,
      })
      .then((ms) => {
        this.startTypewriterRAF(this.introMsg, ms, 'intro');
        // LÃ¥s opp Start quiz nÃ¥r voice er ferdig
        this.introUnlockTO = setTimeout(() => {
          this.canStartQuiz = true;
          this.cdr.detectChanges();
        }, ms);
      })
      .catch(() => {
        // Autoplay blokkert: kjÃ¸r fallback likevel, sÃ¥ brukeren slipper deadlock
        const ms = 41_000;
        this.startTypewriterRAF(this.introMsg, ms, 'intro');
        this.introUnlockTO = setTimeout(() => {
          this.canStartQuiz = true;
          this.cdr.detectChanges();
        }, ms);
      });
  }

  /** Smooth typewriter (rAF utenfor Angular) */
  private startTypewriterRAF(text: string, totalMs: number, sink: 'intro' | 'lose' | 'win') {
    // Avbryt eventuell forrige
    if (sink === 'intro' && this.typeRAF) cancelAnimationFrame(this.typeRAF);
    if (sink === 'lose' && this.loseTypeRAF) cancelAnimationFrame(this.loseTypeRAF);
    if (sink === 'win' && this.winTypeRAF) cancelAnimationFrame(this.winTypeRAF);

    // Reset riktig tekstfelt
    if (sink === 'intro') this.typed = '';
    else if (sink === 'lose') this.typedLose = '';
    else this.typedWin = '';

    const start = performance.now();
    const len = text.length;
    const safeTotal = Math.max(200, totalMs || 0);
    let lastChars = -1;

    this.zone.runOutsideAngular(() => {
      const tick = (now: number) => {
        const elapsed = now - start;
        const chars = Math.min(len, Math.floor((elapsed / safeTotal) * len));

        if (chars !== lastChars) {
          lastChars = chars;
          const slice = text.slice(0, chars);
          if (sink === 'intro') this.typed = slice;
          else if (sink === 'lose') this.typedLose = slice;
          else this.typedWin = slice;
          this.cdr.detectChanges();
        }

        if (chars < len) {
          const id = requestAnimationFrame(tick);
          if (sink === 'intro') this.typeRAF = id;
          else if (sink === 'lose') this.loseTypeRAF = id;
          else this.winTypeRAF = id;
        }
      };

      const id = requestAnimationFrame(tick);
      if (sink === 'intro') this.typeRAF = id;
      else if (sink === 'lose') this.loseTypeRAF = id;
      else this.winTypeRAF = id;
    });
  }

  // ---------- QUIZ ----------
  beginQuiz() {
    if (!this.canStartQuiz) return;
    this.audio.stopAll();
    this.state = 'quiz';
    this.idx = 0;

    // ðŸ”’ Shuffle ONLY the questions (keep choices order intact)
    this.questions = this.shuffleArray(this.baseQuestions).map((q) => ({
      text: q.text,
      choices: [...q.choices], // behold rekkefÃ¸lgen
      answerIndex: q.answerIndex, // peker fortsatt riktig
    }));

    this.startQuestionTimer();
  }

  private startQuestionTimer() {
    this.timeLeft = 60;
    if (this.timerId) clearInterval(this.timerId);
    this.timerId = setInterval(() => {
      this.timeLeft--;
      if (this.timeLeft <= 0) this.fail();
    }, 1000);
  }

  answer(i: number) {
    const q = this.questions[this.idx];
    if (!q) return;

    if (i === q.answerIndex) {
      this.idx++;
      if (this.idx >= this.questions.length) this.win();
      else this.startQuestionTimer();
    } else {
      this.fail();
    }
  }

  // ---------- OUTCOMES ----------
  private async startLoseNarration() {
    const voiceMs = await this.audio.playLoseWithTheme({
      themeSrc: '/sounds/saw-theme2.mp3',
      themeVolume: 0.14,
      themeStartDelayMs: 7500,
      themeFadeInMs: 900,
      themeFadeOutMs: 900,
      voiceFallbackMs: 20_000,
      loopTheme: false,
    });
    this.startTypewriterRAF(this.loseMsg, voiceMs, 'lose');
  }

  async startWinNarration() {
    if (this.winTypeRAF) cancelAnimationFrame(this.winTypeRAF);
    this.typedWin = '';

    const voiceMs = await this.audio.playWinWithThemeSynced({
      themeSrc: '/sounds/saw-theme2.mp3',
      themeVolume: 0.14,
      themeFadeInMs: 900,
      themeFadeOutMs: 900,
      tailGapMs: 0,
      fallbackVoiceMs: 23_000,
      fallbackThemeMs: 18_000,
    });
    this.startTypewriterRAF(this.winMsg, voiceMs, 'win');
  }

  private win() {
    this.clearAllTimers();
    this.state = 'win';
    this.startWinNarration();
  }

  private fail() {
    this.clearAllTimers();
    this.state = 'lose';
    this.startLoseNarration();
    this.startVirus(this.VIRUS_DURATION_MS);
  }

  tryAgain() {
    this.audio.stopAll();
    this.logs = [];
    this.progress = 0;
    this.typed = this.typedLose = this.typedWin = '';
    this.canStartQuiz = false;
    this.startIntro();
  }

  goBack() {
    localStorage.removeItem('egg_enabled');
    window.location.reload();
  }

  // ---------- Fake virus ----------
  private startVirus(durationMs: number) {
    const start = performance.now();
    this.logs = [];
    this.progress = 0;

    const progTick = () => {
      const elapsed = performance.now() - start;
      this.progress = Math.min(100, Math.floor((elapsed / durationMs) * 100));
      if (elapsed < durationMs) {
        this.virusRAF = requestAnimationFrame(progTick);
      } else {
        if (this.logInterval) clearInterval(this.logInterval);
        this.state = 'cooldown';
      }
    };
    this.virusRAF = requestAnimationFrame(progTick);

    const names = [
      'system32.dll',
      'gradebook.xlsx',
      'joakim_photos.zip',
      'kernel.sys',
      'registry.dat',
      'secrets.txt',
      'ng-build.cache',
      'node_modules',
      'tailwind.config.js',
    ];
    this.logInterval = setInterval(() => {
      const f = names[Math.floor(Math.random() * names.length)];
      const pct = Math.floor(Math.random() * 100);
      this.logs.unshift(`[${new Date().toLocaleTimeString()}] Injecting ${f} ... ${pct}%`);
      if (this.logs.length > 40) this.logs.pop();
    }, 300);
  }

  // ---------- Utils ----------
  private shuffleArray<T>(arr: T[]): T[] {
    const a = arr.slice();
    for (let i = a.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [a[i], a[j]] = [a[j], a[i]];
    }
    return a;
  }

  private shuffleQuestion(q: Question): Question {
    const pairs = q.choices.map((c, i) => ({ c, i }));
    for (let j = pairs.length - 1; j > 0; j--) {
      const k = Math.floor(Math.random() * (j + 1));
      [pairs[j], pairs[k]] = [pairs[k], pairs[j]];
    }
    return {
      text: q.text,
      choices: pairs.map((p) => p.c),
      answerIndex: pairs.findIndex((p) => p.i === q.answerIndex),
    };
  }

  private clearAllTimers() {
    if (this.timerId) clearInterval(this.timerId);
    if (this.typeRAF) cancelAnimationFrame(this.typeRAF);
    if (this.loseTypeRAF) cancelAnimationFrame(this.loseTypeRAF);
    if (this.winTypeRAF) cancelAnimationFrame(this.winTypeRAF);
    if (this.virusRAF) cancelAnimationFrame(this.virusRAF);
    if (this.logInterval) clearInterval(this.logInterval);
    if (this.introUnlockTO) clearTimeout(this.introUnlockTO);
    this.timerId =
      this.typeRAF =
      this.loseTypeRAF =
      this.winTypeRAF =
      this.virusRAF =
      this.logInterval =
      this.introUnlockTO =
        undefined as any;
  }
}
